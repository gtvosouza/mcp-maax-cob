openapi: 3.0.3
info:
  title: MCP - Pagamentos (MVP)
  version: 0.1.0
  description: >
    API MCP (Modelo de Protocolo de Contexto) para unificar integrações com provedores de cobrança.
servers:
  - url: http://localhost:3000

security:
  - PublicApiKey: []

components:
  securitySchemes:
    AdminApiKey:
      type: apiKey
      in: header
      name: X-Admin-Api-Key
    PublicApiKey:
      type: apiKey
      in: header
      name: X-Public-Api-Key

  schemas:
    InitializeTenantResponse:
      type: object
      properties:
        tenant_id: { type: string, format: uuid }
        admin_api_key: { type: string }
    InitializeProviderRequest:
      type: object
      required: [provider_type, friendly_name, credentials, provider_specific_config]
      properties:
        provider_type: { type: string, enum: [sicredi, banco_do_brasil, cora, itau, mock] }
        friendly_name: { type: string }
        credentials: { type: object, additionalProperties: true }
        provider_specific_config: { type: object, additionalProperties: true }
    InitializeProviderResponse:
      type: object
      properties:
        provider_id: { type: string, format: uuid }
    CreatePublicApiKeyResponse:
      type: object
      properties:
        api_key: { type: string }
    ChargeRequest:
      type: object
      required: [provider_id, amount, due_date, customer, payment_methods]
      properties:
        provider_id: { type: string, format: uuid }
        amount: { type: integer, description: "centavos" }
        due_date: { type: string, format: date }
        reference_id: { type: string }
        payment_methods:
          type: array
          items: { type: string, enum: [boleto, pix] }
        customer:
          type: object
          required: [name, document]
          properties:
            name: { type: string }
            document: { type: string }
            address: { type: object, additionalProperties: true }
        interest: { type: object, additionalProperties: true }
        fine: { type: object, additionalProperties: true }
        discounts:
          type: array
          items: { type: object, additionalProperties: true }
    ChargeResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        provider_charge_id: { type: string }
        status: { type: string, enum: [PENDING, PAID, CANCELED] }
        amount: { type: integer }
        due_date: { type: string, format: date }
        payment_methods: { type: array, items: { type: string } }
        data:
          type: object
          description: "Dados de pagamento (linha digitável, QR Code, etc.)"
          additionalProperties: true
    ErrorResponse:
      type: object
      properties:
        error_code: { type: string }
        message: { type: string }
        details: { type: array, items: { type: string } }
        trace_id: { type: string }
    WebhookRegistrationRequest:
      type: object
      required: [url, enabled_events]
      properties:
        url: { type: string, format: uri }
        enabled_events:
          type: array
          items: { type: string, enum: [charge.created, charge.paid, charge.canceled] }
    WebhookRegistrationResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        webhook_secret: { type: string }

paths:
  /v1/tenants/init:
    post:
      summary: Initialize Tenant
      security: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeTenantResponse"

  /v1/admin/providers:
    post:
      summary: Initialize Provider
      security:
        - AdminApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitializeProviderRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitializeProviderResponse"

  /v1/admin/api-keys:
    post:
      summary: Create Public API Key
      security:
        - AdminApiKey: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePublicApiKeyResponse"

  /v1/charges:
    get:
      summary: List charges with cursor pagination
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 20 }
        - in: query
          name: starting_after
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/ChargeResponse" }
                  next_cursor: { type: string }
    post:
      summary: Create charge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChargeRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeResponse"

  /v1/charges/{id}:
    get:
      summary: Retrieve charge
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargeResponse"

  /v1/charges/{id}/instructions:
    post:
      summary: Apply instruction to charge
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                instruction_type: { type: string }
                parameters: { type: object, additionalProperties: true }
      responses:
        "202":
          description: Accepted

  /v1/admin/webhooks:
    post:
      summary: Register webhook endpoint
      security:
        - AdminApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookRegistrationRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookRegistrationResponse"
