openapi: 3.0.3
info:
  title: MCP MAAX COB - Token API
  version: 1.0.0
  description: >
    API minimalista baseada em tokens Bearer para gerar e consultar cobranças
    diretamente nos provedores integrados.
servers:
  - url: http://localhost:3000

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    InitializeResponse:
      type: object
      properties:
        providerId: { type: string }
        tenantId: { type: string, nullable: true }
        sessionId: { type: string }
        cache:
          type: object
          properties:
            enabled: { type: boolean }
            hit: { type: boolean }
            forceRefresh: { type: boolean }
            ttlSeconds: { type: integer }
        expiresAt: { type: string, format: date-time }
    ChargeRequest:
      type: object
      required: [amount, due_date, payment_methods, customer]
      properties:
        amount: { type: integer, description: "Valor em centavos" }
        due_date: { type: string, format: date }
        reference_id: { type: string, nullable: true }
        payment_methods:
          type: array
          items: { type: string, enum: [boleto, pix] }
        customer:
          type: object
          required: [name, document]
          properties:
            name: { type: string }
            document: { type: string }
            address: { type: object, additionalProperties: true }
        interest: { type: object, additionalProperties: true }
        fine: { type: object, additionalProperties: true }
        discounts:
          type: array
          items: { type: object, additionalProperties: true }
        provider_config:
          type: object
          additionalProperties: true
    ChargeResponse:
      type: object
      properties:
        id: { type: string }
        provider_charge_id: { type: string }
        status: { type: string, enum: [PENDING, PAID, CANCELLED] }
        amount: { type: integer }
        due_date: { type: string, format: date }
        payment_methods: { type: array, items: { type: string } }
        data: { type: object, additionalProperties: true }
    ProviderError:
      type: object
      properties:
        error_code: { type: string }
        message: { type: string }
        trace_id: { type: string }

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Serviço disponível
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  redis: { type: string }
                  version: { type: string }

  /initialize:
    post:
      summary: Inicializa contexto e escreve cache no Redis
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Sessão inicializada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitializeResponse'
        '401':
          description: Token inválido ou expirado

  /v1/charges:
    post:
      summary: Cria cobrança no provedor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
      responses:
        '201':
          description: Cobrança criada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
        '401':
          description: Token inválido
        '502':
          description: Erro no provedor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderError'

  /v1/charges/{id}:
    get:
      summary: Consulta cobrança diretamente no provedor
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Dados da cobrança
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
        '401':
          description: Token inválido
        '502':
          description: Erro no provedor

  /v1/charges/{id}/cancel:
    post:
      summary: Solicita cancelamento da cobrança
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Cancelamento efetivado
        '400':
          description: Cobrança não pode ser cancelada
        '401':
          description: Token inválido
        '502':
          description: Erro no provedor
