version: '3.8'

name: mcp-maax-cob

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: mcp
      POSTGRES_USER: mcpuser
      POSTGRES_PASSWORD: mcppass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcpuser -d mcp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # REST API Server (porta 3000)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: mcp
      POSTGRES_USER: mcpuser
      POSTGRES_PASSWORD: mcppass
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      ENCRYPTION_KEY_HEX: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      WEBHOOK_HMAC_SECRET: mcp-webhook-secret-2025
      RATE_LIMIT: 120
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MCP Server (STDIO + HTTP/SSE + WebSocket)
  mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
      target: runtime
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      MCP_TRANSPORT: hybrid
      MCP_HTTP_PORT: 3001
      MCP_WS_PORT: 3002
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: mcp
      POSTGRES_USER: mcpuser
      POSTGRES_PASSWORD: mcppass
      REDIS_URL: redis://redis:6379
      ENCRYPTION_KEY_HEX: 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
      WEBHOOK_HMAC_SECRET: mcp-webhook-secret-2025
      RATE_LIMIT: 120
    ports:
      - "3001:3001"  # HTTP/SSE
      - "3002:3002"  # WebSocket
    volumes:
      # Para STDIO - mount do socket
      - /tmp:/tmp
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('MCP healthy')"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  default:
    name: mcp-network